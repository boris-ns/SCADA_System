//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AlarmDisplay.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Alarm", Namespace="http://schemas.datacontract.org/2004/07/SCADA_Core")]
    [System.SerializableAttribute()]
    public partial class Alarm : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IRealTimeUnit")]
    public interface IRealTimeUnit {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/IsRTUNameAvailable", ReplyAction="http://tempuri.org/IRealTimeUnit/IsRTUNameAvailableResponse")]
        bool IsRTUNameAvailable(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/IsRTUNameAvailable", ReplyAction="http://tempuri.org/IRealTimeUnit/IsRTUNameAvailableResponse")]
        System.Threading.Tasks.Task<bool> IsRTUNameAvailableAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/InitRealTimeUnit", ReplyAction="http://tempuri.org/IRealTimeUnit/InitRealTimeUnitResponse")]
        void InitRealTimeUnit(string rtuName, string publicKeyPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/InitRealTimeUnit", ReplyAction="http://tempuri.org/IRealTimeUnit/InitRealTimeUnitResponse")]
        System.Threading.Tasks.Task InitRealTimeUnitAsync(string rtuName, string publicKeyPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/SendValue", ReplyAction="http://tempuri.org/IRealTimeUnit/SendValueResponse")]
        void SendValue(string message, byte[] signature);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/SendValue", ReplyAction="http://tempuri.org/IRealTimeUnit/SendValueResponse")]
        System.Threading.Tasks.Task SendValueAsync(string message, byte[] signature);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRealTimeUnitChannel : AlarmDisplay.ServiceReference.IRealTimeUnit, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RealTimeUnitClient : System.ServiceModel.ClientBase<AlarmDisplay.ServiceReference.IRealTimeUnit>, AlarmDisplay.ServiceReference.IRealTimeUnit {
        
        public RealTimeUnitClient() {
        }
        
        public RealTimeUnitClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RealTimeUnitClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RealTimeUnitClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RealTimeUnitClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool IsRTUNameAvailable(string name) {
            return base.Channel.IsRTUNameAvailable(name);
        }
        
        public System.Threading.Tasks.Task<bool> IsRTUNameAvailableAsync(string name) {
            return base.Channel.IsRTUNameAvailableAsync(name);
        }
        
        public void InitRealTimeUnit(string rtuName, string publicKeyPath) {
            base.Channel.InitRealTimeUnit(rtuName, publicKeyPath);
        }
        
        public System.Threading.Tasks.Task InitRealTimeUnitAsync(string rtuName, string publicKeyPath) {
            return base.Channel.InitRealTimeUnitAsync(rtuName, publicKeyPath);
        }
        
        public void SendValue(string message, byte[] signature) {
            base.Channel.SendValue(message, signature);
        }
        
        public System.Threading.Tasks.Task SendValueAsync(string message, byte[] signature) {
            return base.Channel.SendValueAsync(message, signature);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IAlarmDisplay", CallbackContract=typeof(AlarmDisplay.ServiceReference.IAlarmDisplayCallback))]
    public interface IAlarmDisplay {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlarmDisplay/AlarmDisplayClientInit", ReplyAction="http://tempuri.org/IAlarmDisplay/AlarmDisplayClientInitResponse")]
        void AlarmDisplayClientInit();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlarmDisplay/AlarmDisplayClientInit", ReplyAction="http://tempuri.org/IAlarmDisplay/AlarmDisplayClientInitResponse")]
        System.Threading.Tasks.Task AlarmDisplayClientInitAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAlarmDisplayCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlarmDisplay/PrintAlarmsInfo", ReplyAction="http://tempuri.org/IAlarmDisplay/PrintAlarmsInfoResponse")]
        void PrintAlarmsInfo(AlarmDisplay.ServiceReference.Alarm[] alarms);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAlarmDisplayChannel : AlarmDisplay.ServiceReference.IAlarmDisplay, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AlarmDisplayClient : System.ServiceModel.DuplexClientBase<AlarmDisplay.ServiceReference.IAlarmDisplay>, AlarmDisplay.ServiceReference.IAlarmDisplay {
        
        public AlarmDisplayClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public AlarmDisplayClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public AlarmDisplayClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AlarmDisplayClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AlarmDisplayClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void AlarmDisplayClientInit() {
            base.Channel.AlarmDisplayClientInit();
        }
        
        public System.Threading.Tasks.Task AlarmDisplayClientInitAsync() {
            return base.Channel.AlarmDisplayClientInitAsync();
        }
    }
}
